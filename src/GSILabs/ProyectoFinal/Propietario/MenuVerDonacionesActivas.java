package GSILabs.ProyectoFinal.Propietario;

import GSILabs.BModel.Donacion;
import GSILabs.BModel.Propietario;
import GSILabs.BModel.Usuario;
import static GSILabs.MongoDB.ConexionBBDD.descargarDonacionesDisponibles;
import static GSILabs.MongoDB.ConexionBBDD.eliminarDonacion;
import java.util.ArrayList;
import javax.swing.DefaultListModel;

/**
 * Clase MenuVerDonacionesActivas
 * Interfaz Gráfica mediante la que se muestran las donaciones que todavía
 * están sin reservar.
 * @author Grupo 3 - GSI
 * @version 1.0
 * @since 02.12.2023
 */
public class MenuVerDonacionesActivas extends javax.swing.JFrame {
    
    /**
     * Almacena datos del usuario que está utilizando la aplicación.
     */
    private Usuario usuario = null;
    private ArrayList<Donacion> donaciones = new ArrayList<>();
    private ArrayList<Donacion> comidasUsuario = new ArrayList<>();

    /**
     * Constructor MenuVerDonacionesActivas
     * @param usuario usuario con la que se está utilizando la aplicación.
     */
    public MenuVerDonacionesActivas(Usuario usuario) {
        initComponents();
        this.donaciones = descargarDonacionesDisponibles(this.usuario);
        DefaultListModel modelo = new DefaultListModel();
        this.listaComidas.setModel(modelo);

        for (Donacion donacion : this.donaciones){ 
            for (Propietario propietario : donacion.getLocal().getPropietarios()) {
                if((propietario.getNick()).equals(usuario.getNick())) {
                    modelo.addElement(donacion.getNombreProducto());
                    comidasUsuario.add(donacion);
                }
            }
        }
      
        this.listaComidas.setModel(modelo);
        
        this.usuario = usuario;
        
        super.setVisible(true);
        super.setLocationRelativeTo(null);
    }
    
    public String devuelveComida(String comida){
        return comida;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelDonacionesDisponibles = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaComidas = new javax.swing.JList<>();
        botonVolver = new javax.swing.JButton();
        BotonEliminar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        labelDonacionesDisponibles.setFont(new java.awt.Font("Monotype Corsiva", 0, 24)); // NOI18N
        labelDonacionesDisponibles.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelDonacionesDisponibles.setText("Donaciones Disponibles");

        jScrollPane1.setViewportView(listaComidas);

        botonVolver.setText("Volver");
        botonVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonVolverActionPerformed(evt);
            }
        });

        BotonEliminar.setBackground(new java.awt.Color(255, 0, 51));
        BotonEliminar.setText("Eliminar");
        BotonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonEliminarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(botonVolver)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(BotonEliminar))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addComponent(labelDonacionesDisponibles, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(64, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(labelDonacionesDisponibles)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonVolver)
                    .addComponent(BotonEliminar))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonVolverActionPerformed
        this.dispose();
    }//GEN-LAST:event_botonVolverActionPerformed

    private void BotonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonEliminarActionPerformed
        int indiceLocal = this.listaComidas.getSelectedIndex();
        Donacion comidaSeleccionada = this.comidasUsuario.get(indiceLocal);
        int indiceGeneral = -1;
        for (int i = 0; i < this.donaciones.size(); i++) {
            if(this.donaciones.get(i).equals(comidaSeleccionada)) {
                indiceGeneral = i;
            }
        }
        
        //Si indiceGeneral contiene un indiceGeneral
        if(indiceGeneral != -1) {
            DefaultListModel modelo = (DefaultListModel) this.listaComidas.getModel();
            System.out.println(modelo.get(indiceLocal) + " eliminado (" + indiceGeneral + ")");
            modelo.remove(indiceLocal);
            eliminarDonacion(this.donaciones.get(indiceGeneral));
        }
      
    }//GEN-LAST:event_BotonEliminarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotonEliminar;
    private javax.swing.JButton botonVolver;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelDonacionesDisponibles;
    private javax.swing.JList<String> listaComidas;
    // End of variables declaration//GEN-END:variables
}
